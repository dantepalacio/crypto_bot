1
00:00:00,060 --> 00:00:03,059
Speaker 1: записывать на этот компьютер. Все, все в порядке.

2
00:00:03,300 --> 00:00:03,940
Speaker 2: Thank you very much.

3
00:00:04,780 --> 00:00:05,420
Speaker 1: You're welcome.

4
00:00:05,620 --> 00:00:06,592
Speaker 0: Владислав,

5
00:00:06,633 --> 00:00:07,098
Speaker 2: прошу вас.

6
00:00:07,560 --> 00:01:44,637
Speaker 0: Так вот, у нас есть такая проблема. Так как у нас отдел тестирования не слишком жестко развит, плюс у нас кадры не очень сильно квалифицированы, у нас не очень сильно построен бизнес-процесс. Обычно как мы работаем? У нас появляется какой-нибудь проект. Допустим, у нас обычно несколько кейсов существует. Один из кейсов достаточно популярный, когда нас подключают на в какой-то мере существующий проект тестера. Мы не со старта, где-то условно с середины вынуждены подключаться. К тестерам не всегда доверчивое отношение, плюс, чего уж греха таить, например, у тех же программистов очень предвзятое отношение к тестерам. Поэтому силой приходится доказывать, что нас приходится слушать. Поэтому я такой грубиян, кстати. Нам приходится доказывать, что нам надо слушать нас. Эту проблему решает бюрократия, которой у нас пока нет, но которую мы строим. Это причина, почему как раз этот диалог начался. Мы строим эту самую бюрократию, чтобы нас слушали. Сказал Евгений Кронаков товарищ, что надо слушать. Нас слушают. Выбора нет. Что он сказал? Но у нас бизнес-процесс построен так, что не совсем нормально работаем. То есть когда мы подключаемся, документов обычно у нас нет. Как я уже говорил, ТЗ-проектов обычно нет и не предвидится. И это, я так понял, в принципе нормальная практика для рынков, что ТЗ заказчики не пишут.

7
00:01:45,886 --> 00:01:46,319
Speaker 1: Вы пишете.

8
00:01:48,143 --> 00:01:53,139
Speaker 0: Да, но мы пишем не ТЗ, мы пишем, скорее, свою тестовую документацию, которую, конечно же, можно использовать.

9
00:01:53,600 --> 00:02:00,298
Speaker 1: Не тестировщики. Я имею в виду, что заказчик, он, конечно, не пишет ТЗ. Его обычно пишет тот, кто должен разработать, потому что это в его интересах.

10
00:02:01,860 --> 00:02:02,332
Speaker 0: Так вот.

11
00:02:04,851 --> 00:02:05,999
Speaker 1: Дальше. Документов нет.

12
00:02:06,902 --> 00:05:38,459
Speaker 0: Да, документов у нас нет. Работать нам не почему. И мы вот заходим. Блин, я уже забыл мысль. Господи боже мой. Простите. Заходим на проект и начинаем делать ченить. И самое важное, что времени тоже у нас частенько в таких проектах, когда мы середины залетаем, нет. То есть максимум, что у нас остается, это протыкать интуитивным или отхоком что-нибудь как-нибудь где-нибудь. И даже, возможно, не успеть написать какой-нибудь смог тест присылавутый, что было бы неплохо, потому что это нас страхует. Но у нас этого тоже нет. Вот. Сейчас секундочку. Я открою бумажку. И у нас так бывает часто, что один проект, потом другой проект. Вот мы с Женей плюс-минус в этом плане синхронизировались, скажем так, что если проект с нуля начинается, тысяча ровщиков приглашаем с нуля, с этим проблем особо нет. Главное, что я сейчас хотел обсудить, я вот тут вспомнил бумажку, открыл. У нас не очень оптимизированы ресурсы. То есть у нас как бывает, что если проект крупный, то один тестер, один человек. Если проекты поменьше, то один человек может быть на два, либо на три проекта идти. То есть мы же эти аутсорсовые ребята, иногда по аутстафу идем. То есть мы не продуктовые ребята, чтобы прям фокусироваться полностью на проекте и чтобы облизывать его. Я к тому, что для нас свойственно, что один человек работает на нескольких проектах, потому что у нас бизнес модель такая. И не очень разумно тратить ресурсы, бросаться ими прям, мясо закидывать, грубо говоря, что проект-человек, проект-человек, проект-человек. И я в свое время думал, как оптимизировать процесс. То есть у меня какая идея была, она не очень коррелируется с текущей бизнес моделью в принципе SimpleCode. Но я как думал, что есть определенная когорта тестеров постарше, назовем их ледами, кем они и будут являться по факту, человека два или три, которые облизывают абсолютно все проекты документацией. Они изучают, они находятся со старта проекта, знают всю подноготную проекта и пишут для нее документацию соответствующую. После того, как они завершают эту документацию, они отходят от проекта. Не полностью, просто шаг назад делают. И пускают младших ребят работать чисто по бумагам условно. И таким вот макаром, естественно, проверяют после своих младших коллег. И вот таким макаром, я думаю, что, например, два старших и 4-5 младших могут вообще все заменять у нас. И это сэкономит нам денег. И я вот подумал, а как в принципе можно с нашим подходом решить подобную проблему, что у нас тестеры распыляются. То есть у нас много проектов. Один сюда, один туда, один пятый, один десятый. То есть у нас непродуктовая направленность, потому что с продуктом там все просто, как я уже говорил. Как можно решить, как можно построить тестерский процесс, чтобы было нормально, сработало здесь все?

13
00:05:40,824 --> 00:06:05,219
Speaker 1: Обычно в аутсорсинге, все-таки, наверное, это больше аутсорсинг, раз вы сами разрабатываете, тестируете. Не важно, может, по тайм-материал оплачивается, но тем не менее. Вы не сидите у заказчика и не делаете те задачи, которые он вам делает, значит, скорее всего, это больше похоже на аутсорсинг. У проекта есть у вас менеджер?

14
00:06:07,428 --> 00:06:08,597
Speaker 0: Да, часто есть менеджеры.

15
00:06:10,241 --> 00:06:11,188
Speaker 1: Обычно решили

16
00:06:11,228 --> 00:06:12,919
Speaker 2: с менеджером, зарядки мы включениями.

17
00:06:13,741 --> 00:07:35,499
Speaker 1: Хорошо. Есть менеджер, который взаимодействует с заказчиком. Есть его правая рука, ее обычно называют тест-менеджер, можете называть Лиду, это не важно. Это человек, который отвечает за качество вместе с менеджером. Менеджер просто может не до конца за него отвечать, но они вместе строят процесс. Тест-менеджер и менеджер. Тест-менеджер – это то лицо, которое заходит с самого начала, говорит, что тестирование у нас в этом проекте займет столько-то времени, на этот проект нам понадобится, с учетом тех требований, которые я там услышала, были озвучены, если они нигде не описаны. Вот столько-то людей, вот такой-то квалификации. Соответственно, как только у вас есть тест-менеджер одновременно на три проекта, допустим, то он может сказать, что вот здесь, вместе с менеджером, это все вопрос планирования. Они садятся вместе, вместе формируют планчик разработки, включая тестирование, и понимают, что в какой момент им понадобится столько-то людей. И таким образом, соответственно, вы понимаете загрузку вообще вашего отдела по проектам на период времени. Например, насколько долгосрочный или среднесрочный проект, они полгода длятся, три месяца. Как у вас организовано сейчас?

18
00:07:38,161 --> 00:07:59,939
Speaker 2: Проекты бывают, на самом деле, разные, совсем разношерстные. Там, где применяется тестировщик, это средняя жизнь проекта, мы начинаем около трех месяцев. Мы имеем в виду фазы. Да, от трех месяцев. То есть это на выход MVP, это очень активная работа тестировщика.

19
00:08:01,322 --> 00:08:04,183
Speaker 1: А весь проект сам по себе, от старта до конца? Зачастую

20
00:08:04,203 --> 00:08:11,219
Speaker 2: это все долгостройки. Это все мы, по два-три, весь четыре года, который проект жалели.

21
00:08:11,624 --> 00:08:13,119
Speaker 1: То есть они длинные на самом деле?

22
00:08:13,681 --> 00:08:53,512
Speaker 2: Они на самом деле длинные. Бывают коротенькие. Мы прилетели, два-три месяца отработали, MVP выкатили, люди провели гипотезу, не получилось. Стартап не прошел дальше все. Мы дальше на этом проекте не работаем. Есть несколько вариантов так называемых продаж. Первый вариант, это где тестировщик у нас выступает в качестве, именно качественное звено. За него деньги не платят, но это снижает нагрузку на программистов, на АПМ. Есть момент, где тестировщика берут

23
00:08:53,613 --> 00:08:53,813
Speaker 0: и

24
00:08:53,934 --> 00:09:06,199
Speaker 2: просят от них какую-то автоматизацию. Это зачастую сложные большие системы, потому что только опытные люди понимают, что для их бизнеса, для их проекта тестер это Москвия.

25
00:09:08,260 --> 00:09:08,804
Speaker 1: Таких много?

26
00:09:10,820 --> 00:09:51,059
Speaker 2: Таких много. Наверное, составит процентов 5 максимум. Но в основном это почти всегда в наши контракты вкладываем тестировщика. Мы показываем, что тестировщик стоит только для денег, это команда. Мы продаем команду. Да, бывают случаи, что можно вот это что-то выпилить, это можно выпилить. Но когда начинаешь им объяснять, что поэтому пострадает качество и прочее, они соглашаются. Поэтому на последних проектах, точнее всех, тестер купленный, тестер работает. И сейчас, ну, хорошая тенденция, тестер у нас идет практически с самого начала.

27
00:09:51,442 --> 00:09:51,879
Speaker 1: Отлично.

28
00:09:52,200 --> 00:10:48,599
Speaker 2: Опять благодаря Владиславу, он это дело продавил. Я тоже не понимал, зачем это нужно. Есть у нас пара хороших опыта, которые позволили понять, что подключение тестера в самом начале экономия времени почти не до месяца. Словно, после 4 месяцев работы мы сэкономили огромное количество. Я просто понимаю, что те вопросы, которые обнаружил тестер в самом начале и решил, это минус по времени по работе у программистов, что у бэка, что у фронта. Не считая, что потом это переделывание и прочая история. В целом получается очень эффективно. Поэтому сейчас, на моем взгляде, тестеровщик обязательно получает на самой ранней этапе, на этапе создания дизайна, даже не дизайна, а создания варфреймов. На этом этапе уже тестер должен подключаться. Естественно, на все остальные позиции, моменты тоже должны подрубаться.

29
00:10:50,421 --> 00:11:00,756
Speaker 1: Хорошо. А то, что люди заняты на нескольких проектах, это потому, что не очень высокая загрузка на каждом? Они вроде длительные? То есть сами проекты не такие?

30
00:11:00,796 --> 00:11:59,211
Speaker 2: Системы небольшие? Нет. Обычно самая сильная нагрузка в моменте именно BP. И там тестер зачастую у него один серьезный проект и второй какой-нибудь долгоиграющий. Например, можно взять Анастасию. У нее вроде основной проект – аудиоконтрол, но по факту сейчас она большую роль выполняет в центр-хоме. Потому что в аудиоконтроле более латентная фаза, присутствуют какие-то моменты, но времени на него можно сейчас уделить меньше. И так, на самом деле, бывает, что 3-4 тактики. Все тихо, спокойно, спокойно, а потом раз, какой-то факап происходит. Какой-то баг нашли, причем он был плавающий, его никто никогда не видел. Или какую-то новую фичу выпустили, и там нужно ее протестировать. Поэтому, да, несколько проектов. Они сами по себе проекты не маленькие, но вовлеченность в нем 100% просто не нужна.

31
00:12:01,443 --> 00:12:04,940
Speaker 1: Потому что он на сопровождении, и там у вас нет регулярной доработки, правильно?

32
00:12:06,221 --> 00:12:17,937
Speaker 2: Да, опять-таки, это может быть какая-то небольшая доработка, ее нужно проверить. Это может быть какой-то вылечившийся баг, который мы не видели. Вот самые основные кейсы.

33
00:12:20,501 --> 00:12:33,399
Speaker 1: А менеджер понимает на будущее, какие будут доработки? Про баги понятно? Окей, мы не можем предсказать. А вот доработки, их планируют, или это приходит заказчик, тоже говорит, то я хочу?

34
00:12:34,501 --> 00:12:35,879
Speaker 2: Это приходит заказчик, он говорит, хочу.

35
00:12:36,543 --> 00:12:37,083
Speaker 1: Хорошо. Не

36
00:12:37,127 --> 00:12:37,280
Speaker 0: всегда.

37
00:12:38,145 --> 00:12:40,013
Speaker 1: Понятно. То есть прогнозировать

38
00:12:40,053 --> 00:13:00,419
Speaker 2: как человек. Если бы это была продуктовая… Если у вас есть свой продукт, и там можно спрогнозировать. А здесь это чужой бизнес, и зачастую это какие-то стартапы. Почти всегда. Соответственно, он может повернуться в любую сторону.

39
00:13:02,602 --> 00:13:34,219
Speaker 1: Вот Евгений говорит так, как будто на самом деле проблемы никакой нет. И вообще, в принципе, то, что люди заняты на нескольких проектах в аутсорсинге, это нормальная ситуация, и это не страшно. Особенно если они реально недогружены, и зачем им сидеть и пинать, если оплата у вас не просто так, она за что-то. Тогда в чем проблема-то, Владислав? На самом деле в том, что периодически возникают обралы?

40
00:13:35,964 --> 00:13:45,115
Speaker 0: Нет, проблема в оптимизации. Что я вижу, как можно сделать так, чтобы меньшее количество людей выполняло как минимум ту же работу, если не больше.

41
00:13:47,382 --> 00:14:40,079
Speaker 1: Это только если вы четко понимаете, как у вас будут проходить работы на каждом из ваших проектов. Тогда вы реально можете спланировать, что этот человек будет вот здесь в этом месяце, следующим вот здесь, следующим вот здесь. А вот тут доработок не будет, и мы его на новый проект кинем, у нас, скорее всего, будет контракт к этому моменту. Если в случае, описанном во всяком случае Евгением, когда не всегда понятно, что и когда захочет заказчик, хотя на самом деле можно с ним об этом поработать, ну бухтит. Баги они вообще в принципе непредсказуемые, поэтому просто человек сидит в проекте, он туда приписан. Но это не значит, что он сейчас им занимается. И оптимизировать это, честно говоря, никак, кроме планирования, невозможно.

42
00:14:41,320 --> 00:14:45,519
Speaker 0: Хорошо. Я 10 минут назад описал модель, что в ней не так.

43
00:14:46,240 --> 00:16:41,667
Speaker 1: А, в смысле, что будет лид? Да, я же начала говорить. Вот. Что в ней не так? В ней не так, что будет сидеть один, неважно, пускай это даже лид, но он будет сидеть в трех проектах и писать тестовую документацию. Один. На три проекта. А потом придут жены и типа быстренько все протестируют. Ну, то есть не факт, что он успеет справиться с этими тремя проектами к моменту, когда должны прийти жены. И вообще, если, да, началась тенденция привлечения тестировщиков с нуля, то тогда процесс тестирования, он в принципе должен выстраиваться правильно с этого момента. И те тестировщики, которые участвуют в проекте, они теперь не просто тестируют, а еще и всегда создают артефакты после себя. Вот. И в этом случае вы поймете, насколько у вас реально люди должны быть загружены. То есть сейчас вы не до конца это понимаете, потому что люди просто приходят, тестируют и уходят. Как только они начнут выполнять процесс тестирования корректно, со всеми шагами, и оставляя артефакты на каждом этапе тестирования, вы поймете, какова реальная загружка тестировщика должна быть на проектах, и тогда что-то сможете скорректировать. То есть если бы мы говорили о том, что люди малокомпетентны, и они не справляются, у них плохие чек-листы, и нам надо как-то решать эту проблему, тогда привлекать более компетентного человека для составления чек-листов хорошо. Если мы говорим о том, что мы хотим как-то сэкономить время и повесить теперь всю практически работу тестировщиков на одного человека, а остальные просто придут и пробегутся по тест-кейсам, то это нехорошо, потому что он, скорее всего, будет не успевать. То есть один будет зашиваться, а все остальные будут пинать. Приходить быстренько, проходить тест-кейсы, за них уже подумали, все написали, думать не надо. Да, в этом случае

44
00:16:41,768 --> 00:16:47,897
Speaker 2: растень человек не будет, и он более того, не очень будет погружен в собственный проект, который он тестирует.

45
00:16:48,582 --> 00:16:49,579
Speaker 1: Хотел только рассказать.

46
00:16:50,480 --> 00:17:12,719
Speaker 2: И в шаг влево, в шаг вправо для него что-то новенькое появится, у него не будет в голове логической кончики. Документация-то правильная, это нужная штука, чтобы можно было заменять, чтобы была приемственность, так же как у программистов, которые должны писать хороший комментированный код, чтобы другой блогер не мог прийти и уже воспользоваться наработками и не потребоваться огромное количество времени, чтобы разобраться, как с этой историей работает.

47
00:17:14,083 --> 00:18:14,619
Speaker 0: Я не соглашусь с вами обоими. По какой причине? Во-первых, те чек-листы, которые я хочу, чтобы человек условный тест-лит писал, они не будут абсолютными, потому что для меня чек-лист, особенно который написал человек в первый раз, это альфа-версия чек-листа. Они всегда меняются, иногда так кардинально, что от старого чек-листа не остается вообще ничего. А это значит, что будет основной базе, скелет в виде чек-листа, который написал старший, а потом придет младший. И кто сказал, что он не будет расти? Во-первых, проект будет с ним расти, будет меняться, будут чек-листы дополняться, изменяться, и это, скорее всего, будет делать тот же младший. У него будут свои предложения. Не будет предложений, будем думать, а нафиг он здесь. А если будут предложения, почему не будет расти? А так у него будет больше времени, например, на то же самое развитие. Он не будет жениться над швейцом, над удея-игрецом, а потому что у нас обычно так и происходит. Тестер женится над швейцом, над удея-игрецом. Еще и поем чуть-чуть.

48
00:18:16,427 --> 00:18:17,539
Speaker 1: Можно вопрос, Владислав?

49
00:18:18,525 --> 00:18:18,758
Speaker 2: Конечно.

50
00:18:18,980 --> 00:18:45,759
Speaker 1: Было озвучено, что чек-листы меняются сильно в проекте. Тогда у нас придет некий лид, который на трех проектах разработает чек-листы, а потом туда придет QA, ниже уровням June, например. Еще раз будет изучать все, что связано с проектом, какая есть документация, макета и прочее, и переделывать разработанные ранее чек-листы.

51
00:18:47,309 --> 00:18:47,578
Speaker 0: Не так.

52
00:18:48,180 --> 00:18:49,840
Speaker 1: А как? Разучено так. Он

53
00:18:49,860 --> 00:19:17,219
Speaker 0: будет по ним… Ну, скажем так, это гипербола. Он будет по чек-листам работать, будет работать, потом поймет, что… А вот тут как бы не совсем надо. Грубо говоря, кнопку лицензионного соглашения не обязательно нажимать, ее убрали. Убираем чек-лист. Вот из этой категории. Минорные дополнения. Либо уже мажорные, когда разработка пошла вразнос.

54
00:19:18,502 --> 00:19:35,079
Speaker 1: Ну вот возвращаемся тогда назад. Получается, что на первом этапе у нас приходит человек, садится и проходит просто тестирование. Давайте так. А лид потом типа уходит из проекта и вообще им не занимается. Занимается другим и пишет на него чек-листы.

55
00:19:36,781 --> 00:19:41,199
Speaker 0: Да, и если надо, иногда курирует либо проверяет, если есть какие-то проблемы.

56
00:19:41,840 --> 00:20:24,079
Speaker 1: А почему не сделать сразу вот так? То есть человек приходит, он в проекте, он курирует, он помогает разрабатывать чек-листы. Но у него есть Джун, который тоже разрабатывает чек-листы, изначально погружается в проект. И когда уже задача приходит на тестирование, он понимает, что будет тестировать. А его еще и в этот момент ревьюет, когда он там что-то разрабатывает. Потому что когда Джун, когда лид прекратит работу по чек-листам и переключится на другой проект, чтобы теперь в него погружаться и писать чек-листы, ну, ему, во-первых, сложнее будет там ревьюить и отвлекаться. У него же теперь другая задача есть, тоже срочная.

57
00:20:27,547 --> 00:22:26,519
Speaker 2: Могу пример привести. Вот что Мария писала. Это принцип, как у нас работал, как называется, творческий дизайнер. В общем, человек, который руководил департаментом дизайнеров. С головы улетело название. Не суть. Когда появлялся новый проект, она как лид выступала на разных проектах. То есть там есть различные дизайнеры, они закреплены за каждым своим проектом. Они там работают. Но их курирует всегда Вероника. Она всегда курировала с момента создания. Она помогала создавать правильную, допустим, дизайн-схему, выстраивала, проверяла, давала рекомендации. Но, опять-таки, у них было таких сразу несколько. Фактически у нее весь рабочий день входило на то, что она вовлекалась во все проекты. Не полностью с головой, но детали. Она просто проверяла их работу. Помогала так на этапе строительства, так и потом вести проект. Иногда рано или поздно, когда я собираю куритуру, желаю подтолкнуть этот проект кarchy-генератору. Внимание, что может оставаться непростым, не длится, захватывает ресурсы, в меньшей степени. Ты просто условно какие-то endpoints проверяешь, понимаешь, что эти вещи уже нельзя здесь делать криво. А джунник, который только начинает и у него опыта достаточно мало, там уже будет больше увлеченность этого оттенка. Как говорится, мысли, слов на обсуждение.

58
00:22:28,407 --> 00:22:46,255
Speaker 1: Я могу рассказать, как мы делали. У нас, правда, было 50 человек в компании, в проекте, фу, господи, в отделе. Вот, и у нас там были синеры, естественно, и 50 человек один руководитель отдела охватить не мог. Поэтому я сделала матричную структуру,

59
00:22:46,315 --> 00:22:46,536
Speaker 2: ну,

60
00:22:47,018 --> 00:23:01,158
Speaker 1: стандартная такая тема. И у меня синеры, во-первых, им было скучно на проектах, они были достаточно типовыми. И поэтому мы им давали вот такую организационную задачу, они брали на себя группу от трех до девяти человек.

61
00:23:01,805 --> 00:23:02,118
Speaker 2: Кто как.

62
00:23:02,805 --> 00:23:53,051
Speaker 1: Кто сильнее, тот там. Кому нравилось это, возиться там, возиться с младшими, те брали девять человек. И они тоже на совершенно разных проектах с этими девятью людьми занимались, следили за тем, чтобы они все правильно делали. У нас были стандарты. Соответственно, следили за тем, чтобы следовали стандартам. Это было нагрузочное тестирование, но это неважно. Поэтому сама мысль о том, что Владислав, что нужна в принципе вот такая матричная структура и люди, которые будут следить за другими людьми и помогать на первом этапе. Наверное, ничего такого нет, но сейчас не очень много людей и похоже, что этим человеком можешь быть ты. Вот. И кого-то дополнительно сейчас брать, наверное, ну вот и какую-то еще выстраивать структуру, чтобы под тобой были лиды, под которыми будут, которые будут что-то делать и готовить как-то проекты, кого-то координировать. Мне кажется,

63
00:23:53,092 --> 00:23:55,675
Speaker 0: рано. Я не собираюсь никого

64
00:23:55,736 --> 00:23:59,759
Speaker 1: брать. Ну, а как на будущее ты сейчас эту структуру?

65
00:23:59,980 --> 00:24:07,032
Speaker 0: Я собираюсь и таких людей выращивать, а не брать. Если мне брать нужных людей, я сразу условно куплю готовую систему.

66
00:24:10,552 --> 00:24:11,542
Speaker 1: Хорошо. Я собираюсь

67
00:24:11,562 --> 00:24:15,539
Speaker 0: выращивать лидов. Тем более люди есть.

68
00:24:15,660 --> 00:24:53,972
Speaker 1: Но это просто у тебя появятся синеры, которые будут делать то же самое, что сейчас будешь делать ты. Но это же со временем произойдет. Вот. То есть мысль Евгения, наверное, корректна, да, более корректна в плане того, что не обязательно делать какую-то часть работы изо всех остальных. Можно просто находиться рядом с ними, да, вот как и я сказала, и помогать им, и ревьюить их. Но только тогда тот, кто этим занимается, он должен быть высвобожден на какой-то процент, во всяком случае, от инженерской работы, потому что невозможно вот так вот лидить и быть инженером одновременно. Это я вам

69
00:24:53,993 --> 00:25:37,399
Speaker 2: говорю. Абсолютно верно. Потому что, опять-таки, основа на нашем творческом директоре Веронике, которая занималась должность, потом была, говорится, понижена, и в принципе, такая единица перестала существовать. Опять-таки, связано с тем, что она занималась в основном весь день, занималась у нее 90% времени, уходила на это. У нее был заточенный проект, и у нее просто на этот проект не хватало достаточного времени. Появились жалобы, что человек не справляется по проекту, там посадка появляется. Поэтому у TeamLida, чем больше будет таких джуников, тем меньше того, что он будет сам где-то увлекаться.

70
00:25:38,962 --> 00:26:38,619
Speaker 1: Да, ну вот прям ревьюить, ревьюить джунов, это три джуна, это прям уже тяжело, если хороший писатчик пишет листы и действительно их ревьюит. То есть погружаться самому, да? Но ты же, Владислав, именно это и предлагаешь делать, все равно нужно изначально погрузиться, потом рассказать джуну, что он должен делать. Он заодно сразу будет понимать, так, значит, правильный процесс вот такой. Сначала у нас ничего не разработано, но у нас уже есть с кем поговорить, у нас есть требования. Вот Владислав это делает. А я такой подключаюсь посерединке, Владислав передает мне, что он уже узнал, и начинаю ваять чек-листы. Как только он, если же у тебя же запрос на то, чтобы их вырастить до какого-то состояния, вот он, соответственно, будет изначально в этом всем находиться в процессе и расти, потом заменять тебя, когда команда разрастется. Ну то есть не заменять, а брать на себя каких-то людей, которых он сможет ревьюить, когда команда

71
00:26:38,660 --> 00:26:39,259
Speaker 0: разрастется.

72
00:26:40,326 --> 00:27:41,939
Speaker 1: Такой человек. Ну, в общем, мысль такая, что делать какую-то работу за других не стоит. Лучше спланировать работу таким образом, чтобы джуны сразу понимали, сколько времени у них отнимают чек-листы. Всегда могли ответить, что срок окончания тестирования будет такой-то, потому что мне нужно закончить чек-листы или там еще что-то сделать, подготовить данные и так далее. И если изначально за него это будет делать другой человек, да, он потом со временем в этом проекте, конечно, научится это делать, если в твоей парадигме лид уходит и джун остается наедине с проектом, координируемый лидом каким-то образом. То есть со временем. Но время-то идет, а изначально это все можно было сделать, чтобы он уже сразу мог всегда говорить и оценивать свое время и отвечать за свою работу.

73
00:27:43,840 --> 00:27:50,839
Speaker 0: И вот этот человек, пусть джун будет, да, чтобы он сделал вышеперечисленное, что надо сделать?

74
00:27:53,542 --> 00:28:13,159
Speaker 1: Устроить, в вашем случае хорошо бы найти человека, который будет писать требования. Но если такого нет, то он должен участвовать во встречах, в которых будут обсуждаться требования к системе. Фиксировать результат этих встреч и писать чек-листы.

75
00:28:15,105 --> 00:28:15,833
Speaker 0: Но по-другому

76
00:28:15,873 --> 00:28:19,676
Speaker 1: это не работает. Требования к системе. Говорим о старте проекта?

77
00:28:20,581 --> 00:28:21,156
Speaker 0: ТЗ, короче.

78
00:28:22,026 --> 00:28:24,759
Speaker 1: Да. Но если ТЗ не пишется как документ…

79
00:28:24,780 --> 00:28:28,504
Speaker 2: Снимите ТЗ немножко. Это стандарт. Реализация

80
00:28:28,524 --> 00:28:29,679
Speaker 1: функциональных требований.

81
00:28:32,121 --> 00:28:34,299
Speaker 2: Станет требование к работе тестировщика?

82
00:28:35,889 --> 00:28:36,240
Speaker 0: Приложению.

83
00:28:36,464 --> 00:30:33,007
Speaker 1: Нет, к приложению. Вот у нас старт проекта, у нас нет технического задания от заказчика. Соответственно, мы же как-то должны понять, как разрабатывается продукт. Соответственно, чтобы джуну начать писать чек-листы, он должен с этим разобраться и быть в одном контексте со всей командой. Для того, чтобы он был в одном контексте со всей командой, нужно устраивать встречи. Если не пишутся требования, то тогда единственное решение — это встреча в джайле, она три амигос называется. Разработчик, аналитик, тестировщик. Сели, обсудили, как будет вот это, вот это и вот это реализовано. Можно сделать серию встреч по фичам. Все, пошли, один делает код, другой делает чек-лист. Но аналитика нет, пускай будет менеджер проекта, да, и мы их заменим. Менеджер проекта, который понимает, что надо заказчику, да. Тестировщик и разработчик. Разработчик высказал, как он это будет реализовывать, какие у него есть ограничения технические. Тестировщик задал правильные вопросы, Владислав тоже присутствует на этой встрече, чтобы правильно вопросы задать, Джун не задаст правильных вопросов. Вот, соответственно, потом все, вышли, а менеджер говорит, что здесь срочно, что не срочно, что делаем, что из этого обсужденного, а что опускаем. И, соответственно, да, все это фиксируется где-то, хотя бы коротко, внутри задачи с фичей, да, которую нужно реализовать, или с фичами, да. Обсудили одну, пошли другую обсуждать. И все, тестировщик Джун знает, что делать. Владислав, и он привыкает так работать. То есть как только он переключается на какой-то другой проект, тебе уже не нужно идти там и что-то организовывать, он знает, что нужно делать. И вот так вот они и будут расти-то, ребята. И проекты вместе с ними будут расти, потому что он пришел в новый, где другой менеджер и сказал, нам нужна такая встреча. Все.

84
00:30:35,880 --> 00:30:42,699
Speaker 2: Нет, тут по-другому решает Владислав, так или иначе, но эта схема мне прям очень нравится.

85
00:30:43,201 --> 00:30:50,816
Speaker 0: Решать не мне в данном случае. Я за подобную, я всегда был за, тут он Диме и Данилу, особенно к Данилу надо идти.

86
00:30:52,006 --> 00:30:52,278
Speaker 1: Это кто?

87
00:30:53,062 --> 00:30:53,757
Speaker 0: Разработчики

88
00:30:53,778 --> 00:30:53,839
Speaker 1: или?

89
00:30:54,704 --> 00:30:56,868
Speaker 0: Два больших человека в нашей фирме. А,

90
00:30:56,909 --> 00:30:57,220
Speaker 1: не разработчики.

91
00:30:57,586 --> 00:30:58,399
Speaker 2: Учитель компании.

92
00:31:01,908 --> 00:31:07,839
Speaker 1: А в чем проблема собраться? Ну, как бы эта часть рабочая, тут вообще не нужны учредители, директора, как бы.

93
00:31:08,904 --> 00:31:16,028
Speaker 0: Они рулят всеми процессами, как я говорил раньше, тестировщиков всегда недооценивают часто за дело из-за низкого порога входа.

94
00:31:20,504 --> 00:32:18,839
Speaker 2: Немножко тут будет, наверное, не по адресу, тут не к Данилу даже, и даже не к Виктору. Тут надо будет ближе уже с Виктором отработать. Он у нас по бизнес-процессам, по отрисовке и по внедрению профит. Чем я отрисую? Да, в данном случае у меня больше информации, чем у тебя. Поэтому в этом случае нам важно презентовать этот бизнес-процесс, объяснить, для чего он, как он. Я думаю, Виктор все-таки согласится, внесет какие-то корректировки. Он человек опытный, грамотный, и поэтому, если он одобрит, значит, это будет внедрять. А если будет внедряться, значит, это будет обязательно для любого проекта. За исключением каких-нибудь вещей, связанных с тестировщиком, У нас люди работают в качестве помощника на каком-то крупном проекте.

95
00:32:20,182 --> 00:32:29,459
Speaker 1: Мы сейчас с вами прервемся, потому что 40 минут у меня, к сожалению, я убрала платный Zoom. Давайте сейчас перезайдем сразу, чтобы не ждать, когда ворвется.

96
00:32:30,842 --> 00:32:32,399
Speaker 2: Хорошо, договорились.

